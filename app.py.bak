from flask import Flask, jsonify
import logging
from flask_cors import CORS
from flask_jwt_extended import JWTManager
from flask_socketio import SocketIO
import os

# 导入数据库管理器
from database_manager import db_manager
socketio = SocketIO(cors_allowed_origins="*")

def create_app():
    app = Flask(__name__)
    
    # 配置 - let database manager handle the database URI
    app.config['JWT_SECRET_KEY'] = os.environ.get('JWT_SECRET_KEY', 'super-secret-key-for-development')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # 初始化数据库管理器
    db = db_manager.init_app(app)
    
    # 初始化其他扩展
    CORS(app)  # 启用CORS
    jwt = JWTManager(app)
    socketio.init_app(app)
    
    # 配置日志
    logging.basicConfig(level=logging.INFO)
    
    # 在应用上下文中导入模型和蓝图
    with app.app_context():
        # 初始化模型中的 db 实例（如果尚未初始化）
        from models.db_models import init_models_db, model_container
        init_models_db(db)

        # 更新模块中的模型引用
        from models import db_models
        db_models.User = model_container.User
        db_models.CardData = model_container.CardData
        db_models.Deck = model_container.Deck
        db_models.GameHistory = model_container.GameHistory

        # 导入模型以确保它们被注册到 SQLAlchemy
        User = model_container.User
        CardData = model_container.CardData
        Deck = model_container.Deck
        GameHistory = model_container.GameHistory
        
        # 导入并注册蓝图
        try:
            from api.auth import auth_bp
            app.register_blueprint(auth_bp, url_prefix='/api/auth')
        except ImportError as e:
            logging.warning(f"Could not import auth blueprint: {e}")
        
        # 使用新的标准化API蓝图
        try:
            from api.standardized_cards import cards_bp
            app.register_blueprint(cards_bp, url_prefix='/api')
        except ImportError as e:
            logging.error(f"Could not import standardized cards blueprint: {e}")
        
        # 使用新的集成过滤器API蓝图
        try:
            from api.filters_integrated import filters_bp
            app.register_blueprint(filters_bp, url_prefix='/api')
        except ImportError as e:
            logging.error(f"Could not import filters blueprint: {e}")
        
        try:
            from api.local_game import local_game_bp
            app.register_blueprint(local_game_bp, url_prefix='/api')
        except ImportError as e:
            logging.warning(f"Could not import local game blueprint: {e}")
        
        try:
            from api.deck_builder import register_deck_builder_routes
            register_deck_builder_routes(app)
        except ImportError as e:
            logging.warning(f"Could not import deck builder blueprint: {e}")

    @app.route('/health', methods=['GET'])
    def health_check():
        return jsonify({"status": "healthy", "message": "七圣召唤游戏服务器运行正常"}), 200

    @app.route('/api/test', methods=['GET'])
        def api_test_page():
            """提供API测试页面"""
            with open('api_test_page.html', 'r', encoding='utf-8') as f:
                test_page_html = f.read()
            return test_page_html, 200, {'Content-Type': 'text/html'}
    return app

# 应用实例在运行时创建，而不是在导入时创建
if __name__ == "__main__":
    app = create_app()
    socketio.run(app, host="0.0.0.0", port=5000, debug=True)
